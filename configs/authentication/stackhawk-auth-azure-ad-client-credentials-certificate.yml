# stackhawk configuration for Azure Active Directory Client Credentials grant type with a certificate
# https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate

app:
  applicationId: ${HAWK_APP_ID}
  env: Development
  host: http://localhost:3000
  openApiConf:
    filePath: openapi.yml
  autoPolicy: true
  autoInputVectors: true

  authentication:
    loggedInIndicator: ".*" # This will always match, so we will never fall through to loggedOutIndicator
    loggedOutIndicator: "^$" # This will never match, so we will never reauthenticate

    # AuthN Settings
    script:
      name: azure-ad-client-credential-certificate.kts
      parameters:
        cert_path: path/to/certfile.pem # Path to the certificate file in PEM format, e.g. `openssl pkcs12 -in {yourSigningCert.pfx} -clcerts -nokeys -out yourcert.pem`
        tenant: ${AAD_TENANT} # The directory tenant that you want to log the user into. The tenant can be in GUID or friendly name format
#        scope: ${AAD_SCOPE} # OPTIONAL resource identifier (application ID URI), affixed with the .default suffix, e.g. https://graph.microsoft.com/.default
      credentials:
        clientId: ${AAD_CLIENT_ID} # The Application (client) ID that the Azure portal App registrations page assigned to your app
        pem_key: ${AAD_PEM_KEY} # The client key in PEM format, e.g. `openssl pkcs12 -in {yourSigningCert.pfx} -nocerts -nodes | openssl rsa`

    # AuthZ Settings
    tokenExtraction:
      type: TOKEN_PATH
      value: access_token
    tokenAuthorization:
      type: HEADER
      value: Authorization
      tokenType: Bearer
    testPath:
      path: /secured
      success: '.*200.*'

hawkAddOn:
  scripts:
    - name: azure-ad-client-credential-certificate.kts
      path: hawkscripts
      type: authentication
      language: KOTLIN